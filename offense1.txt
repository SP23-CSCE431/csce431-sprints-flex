Inspecting 48 files
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

Offenses:

Gemfile:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
source "https://rubygems.org"
^
Gemfile:1:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
source "https://rubygems.org"
       ^^^^^^^^^^^^^^^^^^^^^^
Gemfile:4:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
ruby "3.1.2"
     ^^^^^^^
Gemfile:7:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "rails", "~> 7.0.4", ">= 7.0.4.2"
    ^^^^^^^
Gemfile:7:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "rails", "~> 7.0.4", ">= 7.0.4.2"
             ^^^^^^^^^^
Gemfile:7:26: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "rails", "~> 7.0.4", ">= 7.0.4.2"
                         ^^^^^^^^^^^^
Gemfile:10:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "sprockets-rails"
    ^^^^^^^^^^^^^^^^^
Gemfile:13:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "pg", "~> 1.1"
    ^^^^
Gemfile:13:11: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "pg", "~> 1.1"
          ^^^^^^^^
Gemfile:16:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "puma", "~> 5.0"
    ^^^^^^
Gemfile:16:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "puma", "~> 5.0"
            ^^^^^^^^
Gemfile:19:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "importmap-rails"
    ^^^^^^^^^^^^^^^^^
Gemfile:22:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "turbo-rails"
    ^^^^^^^^^^^^^
Gemfile:25:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "stimulus-rails"
    ^^^^^^^^^^^^^^^^
Gemfile:28:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "jbuilder"
    ^^^^^^^^^^
Gemfile:40:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "tzinfo-data", platforms: %i[ mingw mswin x64_mingw jruby ]
    ^^^^^^^^^^^^^
Gemfile:40:34: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
gem "tzinfo-data", platforms: %i[ mingw mswin x64_mingw jruby ]
                                 ^
Gemfile:40:62: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
gem "tzinfo-data", platforms: %i[ mingw mswin x64_mingw jruby ]
                                                             ^
Gemfile:43:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
gem "bootsnap", require: false
    ^^^^^^^^^^
Gemfile:54:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "debug", platforms: %i[ mri mingw x64_mingw ]
      ^^^^^^^
Gemfile:54:30: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  gem "debug", platforms: %i[ mri mingw x64_mingw ]
                             ^
Gemfile:54:50: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  gem "debug", platforms: %i[ mri mingw x64_mingw ]
                                                 ^
Gemfile:64:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "web-console"
      ^^^^^^^^^^^^^
Gemfile:75:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "capybara"
      ^^^^^^^^^^
Gemfile:76:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "selenium-webdriver"
      ^^^^^^^^^^^^^^^^^^^^
Gemfile:77:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "webdrivers"
      ^^^^^^^^^^^^
app/channels/application_cable/channel.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module ApplicationCable
^
app/channels/application_cable/connection.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module ApplicationCable
^
app/controllers/admins/omniauth_callbacks_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Admins::OmniauthCallbacksController < Devise::OmniauthCallbacksController
^
app/controllers/admins/omniauth_callbacks_controller.rb:7:25: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      flash[:success] = t 'devise.omniauth_callbacks.success', kind: 'Google'
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:8:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      sign_in_and_redirect admin, event: :authentication
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:10:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      flash[:alert] = t 'devise.omniauth_callbacks.failure', kind: 'Google', reason: "#{auth.info.email} is not authorized."
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:11:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      redirect_to new_admin_session_path
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/sessions_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Admins::SessionsController < Devise::SessionsController
^
app/controllers/application_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class ApplicationController < ActionController::Base
^
app/controllers/dashboards_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class DashboardsController < ApplicationController
^
app/controllers/dashboards_controller.rb:2:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
app/controllers/members_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class MembersController < ApplicationController
^
app/controllers/members_controller.rb:2:39: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_member, only: %i[ show edit update destroy ]
                                      ^
app/controllers/members_controller.rb:2:64: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_member, only: %i[ show edit update destroy ]
                                                               ^
app/controllers/members_controller.rb:10:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
app/controllers/members_controller.rb:19:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
app/controllers/members_controller.rb:28:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to member_url(@member), notice: "Member was successfully created." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:28:64: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to member_url(@member), notice: "Member was successfully created." }
                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:29:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :created, location: @member }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:31:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :new, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:32:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @member.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:41:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to member_url(@member), notice: "Member was successfully updated." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:41:64: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to member_url(@member), notice: "Member was successfully updated." }
                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:42:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :ok, location: @member }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:44:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :edit, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:45:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @member.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:52:13: C: [Correctable] Rails/SaveBang: Use destroy! instead of destroy if the return value is not checked.
    @member.destroy
            ^^^^^^^
app/controllers/members_controller.rb:55:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.html { redirect_to members_url, notice: "Member was successfully destroyed." }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:55:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      format.html { redirect_to members_url, notice: "Member was successfully destroyed." }
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:56:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.json { head :no_content }
                    ^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:60:3: C: [Correctable] Layout/EmptyLinesAroundAccessModifier: Keep a blank line before and after private.
  private
  ^^^^^^^
app/controllers/members_controller.rb:62:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def set_member
^^^^
app/controllers/members_controller.rb:62:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def set_member ...
    ^^^^^^^^^^^^^^
app/controllers/members_controller.rb:67:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def member_params
^^^^
app/controllers/members_controller.rb:67:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def member_params ...
    ^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class PointCategoriesController < ApplicationController
^
app/controllers/point_categories_controller.rb:2:47: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_point_category, only: %i[ show edit update destroy ]
                                              ^
app/controllers/point_categories_controller.rb:2:72: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_point_category, only: %i[ show edit update destroy ]
                                                                       ^
app/controllers/point_categories_controller.rb:10:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
app/controllers/point_categories_controller.rb:19:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
app/controllers/point_categories_controller.rb:28:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to point_category_url(@point_category), notice: "Point category was successfully created." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:28:80: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to point_category_url(@point_category), notice: "Point category was successfully created." }
                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:29:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :created, location: @point_category }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:31:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :new, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:32:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @point_category.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:41:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to point_category_url(@point_category), notice: "Point category was successfully updated." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:41:80: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to point_category_url(@point_category), notice: "Point category was successfully updated." }
                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:42:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :ok, location: @point_category }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:44:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :edit, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:45:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @point_category.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:52:21: C: [Correctable] Rails/SaveBang: Use destroy! instead of destroy if the return value is not checked.
    @point_category.destroy
                    ^^^^^^^
app/controllers/point_categories_controller.rb:55:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.html { redirect_to point_categories_url, notice: "Point category was successfully destroyed." }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:55:63: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      format.html { redirect_to point_categories_url, notice: "Point category was successfully destroyed." }
                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:56:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.json { head :no_content }
                    ^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:60:3: C: [Correctable] Layout/EmptyLinesAroundAccessModifier: Keep a blank line before and after private.
  private
  ^^^^^^^
app/controllers/point_categories_controller.rb:62:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def set_point_category
^^^^
app/controllers/point_categories_controller.rb:62:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def set_point_category ...
    ^^^^^^^^^^^^^^^^^^^^^^
app/controllers/point_categories_controller.rb:67:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def point_category_params
^^^^
app/controllers/point_categories_controller.rb:67:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def point_category_params ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class PointsController < ApplicationController
^
app/controllers/points_controller.rb:2:38: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_point, only: %i[ show edit update destroy ]
                                     ^
app/controllers/points_controller.rb:2:63: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_point, only: %i[ show edit update destroy ]
                                                              ^
app/controllers/points_controller.rb:10:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
app/controllers/points_controller.rb:19:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
app/controllers/points_controller.rb:28:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to point_url(@point), notice: "Point was successfully created." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:28:62: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to point_url(@point), notice: "Point was successfully created." }
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:29:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :created, location: @point }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:31:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :new, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:32:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @point.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:41:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to point_url(@point), notice: "Point was successfully updated." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:41:62: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to point_url(@point), notice: "Point was successfully updated." }
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:42:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :ok, location: @point }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:44:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :edit, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:45:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @point.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:52:12: C: [Correctable] Rails/SaveBang: Use destroy! instead of destroy if the return value is not checked.
    @point.destroy
           ^^^^^^^
app/controllers/points_controller.rb:55:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.html { redirect_to points_url, notice: "Point was successfully destroyed." }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:55:53: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      format.html { redirect_to points_url, notice: "Point was successfully destroyed." }
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:56:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.json { head :no_content }
                    ^^^^^^^^^^^^^^^^
app/controllers/points_controller.rb:60:3: C: [Correctable] Layout/EmptyLinesAroundAccessModifier: Keep a blank line before and after private.
  private
  ^^^^^^^
app/controllers/points_controller.rb:62:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def set_point
^^^^
app/controllers/points_controller.rb:62:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def set_point ...
    ^^^^^^^^^^^^^
app/controllers/points_controller.rb:67:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def point_params
^^^^
app/controllers/points_controller.rb:67:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def point_params ...
    ^^^^^^^^^^^^^^^^
app/helpers/application_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module ApplicationHelper
^
app/helpers/members_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module MembersHelper
^
app/helpers/point_categories_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module PointCategoriesHelper
^
app/helpers/points_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module PointsHelper
^
app/jobs/application_job.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class ApplicationJob < ActiveJob::Base
^
app/mailers/application_mailer.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class ApplicationMailer < ActionMailer::Base
^
app/mailers/application_mailer.rb:2:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  default from: "from@example.com"
                ^^^^^^^^^^^^^^^^^^
app/mailers/application_mailer.rb:3:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  layout "mailer"
         ^^^^^^^^
app/models/admin.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Admin < ApplicationRecord
^
app/models/admin.rb:5:5: C: [Correctable] Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
    return nil unless email =~ /@gmail.com || @tamu.edu\z/
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/admin.rb:5:23: C: [Correctable] Performance/RegexpMatch: Use match? instead of =~ when MatchData is not used.
    return nil unless email =~ /@gmail.com || @tamu.edu\z/
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/application_record.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class ApplicationRecord < ActiveRecord::Base
^
app/models/member.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Member < ApplicationRecord
^
app/models/member.rb:2:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 6) spaces for indentation.
      validates :first_name, presence: true
^^^^^^
app/models/member.rb:3:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 6) spaces for indentation.
      validates :last_name, presence: true
^^^^^^
app/models/member.rb:4:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 6) spaces for indentation.
      validates :email, presence: true
^^^^^^
app/models/member.rb:5:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 6) spaces for indentation.
      validates :phone, presence: true
^^^^^^
app/models/member.rb:6:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 6) spaces for indentation.
      validates :role, presence: true
^^^^^^
app/models/point.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Point < ApplicationRecord
^
app/models/point.rb:4:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 6) spaces for indentation.
      validates :member_id, presence: true
^^^^^^
app/models/point.rb:4:7: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
      validates :member_id, presence: true
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/point.rb:5:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 6) spaces for indentation.
      validates :point_category_id, presence: true
^^^^^^
app/models/point.rb:5:7: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
      validates :point_category_id, presence: true
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/point_category.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class PointCategory < ApplicationRecord
^
app/models/point_category.rb:2:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 6) spaces for indentation.
      validates :name, presence: true
^^^^^^
app/models/point_category.rb:3:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 6) spaces for indentation.
      validates :value, presence: true
^^^^^^
app/views/members/_member.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.extract! member, :id, :first_name, :last_name, :email, :phone, :role, :created_at, :updated_at
^
app/views/members/_member.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.extract! member, :id, :first_name, :last_name, :email, :phone, :role, :created_at, :updated_at
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/members/_member.json.jbuilder:2:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.url member_url(member, format: :json)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/members/index.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.array! @members, partial: "members/member", as: :member
^
app/views/members/index.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.array! @members, partial: "members/member", as: :member
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/members/index.json.jbuilder:1:32: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.array! @members, partial: "members/member", as: :member
                               ^^^^^^^^^^^^^^^^
app/views/members/show.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.partial! "members/member", member: @member
^
app/views/members/show.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.partial! "members/member", member: @member
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/members/show.json.jbuilder:1:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.partial! "members/member", member: @member
              ^^^^^^^^^^^^^^^^
app/views/point_categories/_point_category.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.extract! point_category, :id, :name, :value, :created_at, :updated_at
^
app/views/point_categories/_point_category.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.extract! point_category, :id, :name, :value, :created_at, :updated_at
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/point_categories/_point_category.json.jbuilder:2:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.url point_category_url(point_category, format: :json)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/point_categories/index.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.array! @point_categories, partial: "point_categories/point_category", as: :point_category
^
app/views/point_categories/index.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.array! @point_categories, partial: "point_categories/point_category", as: :point_category
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/point_categories/index.json.jbuilder:1:41: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.array! @point_categories, partial: "point_categories/point_category", as: :point_category
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/point_categories/show.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.partial! "point_categories/point_category", point_category: @point_category
^
app/views/point_categories/show.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.partial! "point_categories/point_category", point_category: @point_category
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/point_categories/show.json.jbuilder:1:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.partial! "point_categories/point_category", point_category: @point_category
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/points/_point.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.extract! point, :id, :member_id, :point_category_id, :is_approved, :created_at, :updated_at
^
app/views/points/_point.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.extract! point, :id, :member_id, :point_category_id, :is_approved, :created_at, :updated_at
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/points/_point.json.jbuilder:2:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.url point_url(point, format: :json)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/points/index.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.array! @points, partial: "points/point", as: :point
^
app/views/points/index.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.array! @points, partial: "points/point", as: :point
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/points/index.json.jbuilder:1:31: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.array! @points, partial: "points/point", as: :point
                              ^^^^^^^^^^^^^^
app/views/points/show.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.partial! "points/point", point: @point
^
app/views/points/show.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.partial! "points/point", point: @point
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/points/show.json.jbuilder:1:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.partial! "points/point", point: @point
              ^^^^^^^^^^^^^^
config.ru:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# This file is used by Rack-based servers to start the application.
^
config.ru:3:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require_relative "config/environment"
                 ^^^^^^^^^^^^^^^^^^^^
db/seeds.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
PointCategory.create!([
^
db/seeds.rb:2:3: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
  {name: "Test Category 1", value: 1},
  ^
db/seeds.rb:2:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {name: "Test Category 1", value: 1},
         ^^^^^^^^^^^^^^^^^
db/seeds.rb:2:37: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
  {name: "Test Category 1", value: 1},
                                    ^
db/seeds.rb:3:3: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
  {name: "Test Category 2", value: 2}
  ^
db/seeds.rb:3:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {name: "Test Category 2", value: 2}
         ^^^^^^^^^^^^^^^^^
db/seeds.rb:3:37: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
  {name: "Test Category 2", value: 2}
                                    ^
db/seeds.rb:4:2: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
])
 ^
db/seeds.rb:6:3: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
  {first_name: "Liberato", last_name: "Aguilar", email: "liberatoaguilar@tamu.edu", phone: "123456789", role: "Test"},
  ^
db/seeds.rb:6:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Liberato", last_name: "Aguilar", email: "liberatoaguilar@tamu.edu", phone: "123456789", role: "Test"},
               ^^^^^^^^^^
db/seeds.rb:6:39: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Liberato", last_name: "Aguilar", email: "liberatoaguilar@tamu.edu", phone: "123456789", role: "Test"},
                                      ^^^^^^^^^
db/seeds.rb:6:57: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Liberato", last_name: "Aguilar", email: "liberatoaguilar@tamu.edu", phone: "123456789", role: "Test"},
                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
db/seeds.rb:6:92: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Liberato", last_name: "Aguilar", email: "liberatoaguilar@tamu.edu", phone: "123456789", role: "Test"},
                                                                                           ^^^^^^^^^^^
db/seeds.rb:6:111: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Liberato", last_name: "Aguilar", email: "liberatoaguilar@tamu.edu", phone: "123456789", role: "Test"},
                                                                                                              ^^^^^^
db/seeds.rb:6:117: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
  {first_name: "Liberato", last_name: "Aguilar", email: "liberatoaguilar@tamu.edu", phone: "123456789", role: "Test"},
                                                                                                                    ^
db/seeds.rb:7:3: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
  {first_name: "Jack", last_name: "Warham", email: "jtw906@tamu.edu", phone: "123456789", role: "Test"},
  ^
db/seeds.rb:7:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Jack", last_name: "Warham", email: "jtw906@tamu.edu", phone: "123456789", role: "Test"},
               ^^^^^^
db/seeds.rb:7:35: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Jack", last_name: "Warham", email: "jtw906@tamu.edu", phone: "123456789", role: "Test"},
                                  ^^^^^^^^
db/seeds.rb:7:52: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Jack", last_name: "Warham", email: "jtw906@tamu.edu", phone: "123456789", role: "Test"},
                                                   ^^^^^^^^^^^^^^^^^
db/seeds.rb:7:78: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Jack", last_name: "Warham", email: "jtw906@tamu.edu", phone: "123456789", role: "Test"},
                                                                             ^^^^^^^^^^^
db/seeds.rb:7:97: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Jack", last_name: "Warham", email: "jtw906@tamu.edu", phone: "123456789", role: "Test"},
                                                                                                ^^^^^^
db/seeds.rb:7:103: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
  {first_name: "Jack", last_name: "Warham", email: "jtw906@tamu.edu", phone: "123456789", role: "Test"},
                                                                                                      ^
db/seeds.rb:8:3: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
  {first_name: "Brennan", last_name: "Rouhana", email: "brennan@tamu.edu", phone: "123456789", role: "Test"},
  ^
db/seeds.rb:8:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Brennan", last_name: "Rouhana", email: "brennan@tamu.edu", phone: "123456789", role: "Test"},
               ^^^^^^^^^
db/seeds.rb:8:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Brennan", last_name: "Rouhana", email: "brennan@tamu.edu", phone: "123456789", role: "Test"},
                                     ^^^^^^^^^
db/seeds.rb:8:56: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Brennan", last_name: "Rouhana", email: "brennan@tamu.edu", phone: "123456789", role: "Test"},
                                                       ^^^^^^^^^^^^^^^^^^
db/seeds.rb:8:83: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Brennan", last_name: "Rouhana", email: "brennan@tamu.edu", phone: "123456789", role: "Test"},
                                                                                  ^^^^^^^^^^^
db/seeds.rb:8:102: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Brennan", last_name: "Rouhana", email: "brennan@tamu.edu", phone: "123456789", role: "Test"},
                                                                                                     ^^^^^^
db/seeds.rb:8:108: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
  {first_name: "Brennan", last_name: "Rouhana", email: "brennan@tamu.edu", phone: "123456789", role: "Test"},
                                                                                                           ^
db/seeds.rb:9:3: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
  {first_name: "Ardian", last_name: "Kuswanto", email: "ardian.kuswanto@tamu.edu", phone: "123456789", role: "Test"}
  ^
db/seeds.rb:9:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Ardian", last_name: "Kuswanto", email: "ardian.kuswanto@tamu.edu", phone: "123456789", role: "Test"}
               ^^^^^^^^
db/seeds.rb:9:37: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Ardian", last_name: "Kuswanto", email: "ardian.kuswanto@tamu.edu", phone: "123456789", role: "Test"}
                                    ^^^^^^^^^^
db/seeds.rb:9:56: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Ardian", last_name: "Kuswanto", email: "ardian.kuswanto@tamu.edu", phone: "123456789", role: "Test"}
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
db/seeds.rb:9:91: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Ardian", last_name: "Kuswanto", email: "ardian.kuswanto@tamu.edu", phone: "123456789", role: "Test"}
                                                                                          ^^^^^^^^^^^
db/seeds.rb:9:110: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  {first_name: "Ardian", last_name: "Kuswanto", email: "ardian.kuswanto@tamu.edu", phone: "123456789", role: "Test"}
                                                                                                             ^^^^^^
db/seeds.rb:9:116: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
  {first_name: "Ardian", last_name: "Kuswanto", email: "ardian.kuswanto@tamu.edu", phone: "123456789", role: "Test"}
                                                                                                                   ^
db/seeds.rb:10:2: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
])
 ^
db/seeds.rb:12:3: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
  {member_id: 1, point_category_id: 1, is_approved: true},
  ^
db/seeds.rb:12:57: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
  {member_id: 1, point_category_id: 1, is_approved: true},
                                                        ^
db/seeds.rb:13:3: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
  {member_id: 1, point_category_id: 2, is_approved: false},
  ^
db/seeds.rb:13:58: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
  {member_id: 1, point_category_id: 2, is_approved: false},
                                                         ^
db/seeds.rb:14:3: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
  {member_id: 4, point_category_id: 1, is_approved: true},
  ^
db/seeds.rb:14:57: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
  {member_id: 4, point_category_id: 1, is_approved: true},
                                                        ^
db/seeds.rb:15:3: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
  {member_id: 3, point_category_id: 1, is_approved: true},
  ^
db/seeds.rb:15:57: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
  {member_id: 3, point_category_id: 1, is_approved: true},
                                                        ^
db/seeds.rb:16:3: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
  {member_id: 2, point_category_id: 1, is_approved: true}
  ^
db/seeds.rb:16:57: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
  {member_id: 2, point_category_id: 1, is_approved: true}
                                                        ^
db/seeds.rb:17:2: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
])
 ^
spec/feature/integration_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# location: spec/feature/integration_spec.rb
^
spec/feature/integration_spec.rb:4:1: C: RSpec/MultipleDescribes: Do not use multiple top-level example groups - try to nest them.
RSpec.describe 'Creating a Member', type: :feature do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:4:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe 'Creating a Member', type: :feature do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:5:3: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
  scenario 'valid inputs' do
  ^^^^^^^^
spec/feature/integration_spec.rb:13:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "member[first_name]", with: 'John'
            ^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:14:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "member[last_name]", with: 'Smith'
            ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:15:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "member[email]", with: 'test@tamu.edu'
            ^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:16:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "member[phone]", with: '123456789'
            ^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:17:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "member[email]", with: 'Test Role'
            ^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:19:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('Member was successfully created.')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:20:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('John Smith')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:21:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('test@tamu.edu')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:22:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('123456789')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:23:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('Test Role')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:25:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('Member was successfully destroyed.')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:28:3: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
  scenario 'invalid inputs' do
  ^^^^^^^^
spec/feature/integration_spec.rb:30:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "member[first_name]", with: ''
            ^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:31:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "member[last_name]", with: ''
            ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:32:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "member[email]", with: ''
            ^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:33:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "member[phone]", with: ''
            ^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:34:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "member[email]", with: ''
            ^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:36:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('cannot be empty')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:40:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe 'Creating a Point Category', type: :feature do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:41:3: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
  scenario 'valid inputs' do
  ^^^^^^^^
spec/feature/integration_spec.rb:49:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "point_category[name]", with: 'Test Category'
            ^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:50:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "point_category[value]", with: 1
            ^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:52:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('Point category was successfully created.')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:53:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('Test Category')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:54:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('1')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:56:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('Point Category was successfully destroyed.')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:59:3: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
  scenario 'invalid inputs' do
  ^^^^^^^^
spec/feature/integration_spec.rb:61:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "point_category[name]", with: ''
            ^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:62:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "point_category[value]", with: nil
            ^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:64:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('cannot be empty')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:68:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe 'Creating a Point', type: :feature do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:69:3: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
  scenario 'valid inputs' do
  ^^^^^^^^
spec/feature/integration_spec.rb:77:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "point[member_id]", with: 1
            ^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:78:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "point[point_category_id]", with: 1
            ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:79:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "point[is_approved]", with: true
            ^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:81:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('Point category was successfully created.')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:82:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('1')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:83:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('true')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:85:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('Point was successfully destroyed.')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:88:3: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
  scenario 'invalid inputs' do
  ^^^^^^^^
spec/feature/integration_spec.rb:90:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "point[member_id]", with: nil
            ^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:91:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "point[point_category_id]", with: nil
            ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:92:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "point[is_approved]", with: nil
            ^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_spec.rb:94:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(page).to have_content('cannot be empty')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/admin_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/models/admin_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe Admin, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/rails_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# This file is copied to spec/ when you run 'rails generate rspec:install'
^
spec/rails_helper.rb:6:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
abort("The Rails environment is running in production mode!") if Rails.env.production?
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/rails_helper.rb:30:3: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
  abort e.to_s.strip
  ^^^^^^^^^^^^^^^^^^
spec/rails_helper.rb:34:33: C: Style/InlineComment: Avoid trailing inline comments.
    Rails.application.load_seed # loading seeds
                                ^^^^^^^^^^^^^^^
spec/rails_helper.rb:37:25: C: Rails/FilePath: Prefer Rails.root.join('path/to').
  config.fixture_path = "#{::Rails.root}/spec/fixtures"
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
# location: spec/unit/unit_spec.rb
^
spec/unit/unit_spec.rb:4:1: C: RSpec/MultipleDescribes: Do not use multiple top-level example groups - try to nest them.
RSpec.describe PointCategory, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:4:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe PointCategory, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:10:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(subject).to be_valid
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:10:12: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    expect(subject).to be_valid
           ^^^^^^^
spec/unit/unit_spec.rb:14:5: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    subject.name = nil
    ^^^^^^^
spec/unit/unit_spec.rb:15:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(subject).not_to be_valid
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:15:12: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    expect(subject).not_to be_valid
           ^^^^^^^
spec/unit/unit_spec.rb:19:5: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    subject.value = nil
    ^^^^^^^
spec/unit/unit_spec.rb:20:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(subject).not_to be_valid
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:20:12: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    expect(subject).not_to be_valid
           ^^^^^^^
spec/unit/unit_spec.rb:24:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe Member, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:26:37: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    described_class.new(first_name: "John", last_name: "Smith", email: "test@tamu.edu", phone: "123456789", role: "member")
                                    ^^^^^^
spec/unit/unit_spec.rb:26:56: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    described_class.new(first_name: "John", last_name: "Smith", email: "test@tamu.edu", phone: "123456789", role: "member")
                                                       ^^^^^^^
spec/unit/unit_spec.rb:26:72: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    described_class.new(first_name: "John", last_name: "Smith", email: "test@tamu.edu", phone: "123456789", role: "member")
                                                                       ^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:26:96: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    described_class.new(first_name: "John", last_name: "Smith", email: "test@tamu.edu", phone: "123456789", role: "member")
                                                                                               ^^^^^^^^^^^
spec/unit/unit_spec.rb:26:115: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    described_class.new(first_name: "John", last_name: "Smith", email: "test@tamu.edu", phone: "123456789", role: "member")
                                                                                                                  ^^^^^^^^
spec/unit/unit_spec.rb:30:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(subject).to be_valid
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:30:12: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    expect(subject).to be_valid
           ^^^^^^^
spec/unit/unit_spec.rb:34:5: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    subject.first_name = nil
    ^^^^^^^
spec/unit/unit_spec.rb:35:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(subject).not_to be_valid
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:35:12: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    expect(subject).not_to be_valid
           ^^^^^^^
spec/unit/unit_spec.rb:39:5: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    subject.last_name = nil
    ^^^^^^^
spec/unit/unit_spec.rb:40:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(subject).not_to be_valid
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:40:12: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    expect(subject).not_to be_valid
           ^^^^^^^
spec/unit/unit_spec.rb:44:5: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    subject.email = nil
    ^^^^^^^
spec/unit/unit_spec.rb:45:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(subject).not_to be_valid
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:45:12: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    expect(subject).not_to be_valid
           ^^^^^^^
spec/unit/unit_spec.rb:49:5: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    subject.phone = nil
    ^^^^^^^
spec/unit/unit_spec.rb:50:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(subject).not_to be_valid
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:50:12: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    expect(subject).not_to be_valid
           ^^^^^^^
spec/unit/unit_spec.rb:54:5: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    subject.role = nil
    ^^^^^^^
spec/unit/unit_spec.rb:55:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(subject).not_to be_valid
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:55:12: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    expect(subject).not_to be_valid
           ^^^^^^^
spec/unit/unit_spec.rb:59:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe Point, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:65:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(subject).to be_valid
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:65:12: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    expect(subject).to be_valid
           ^^^^^^^
spec/unit/unit_spec.rb:69:5: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    subject.member_id = nil
    ^^^^^^^
spec/unit/unit_spec.rb:70:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(subject).not_to be_valid
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:70:12: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    expect(subject).not_to be_valid
           ^^^^^^^
spec/unit/unit_spec.rb:74:5: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    subject.point_category_id = nil
    ^^^^^^^
spec/unit/unit_spec.rb:75:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(subject).not_to be_valid
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_spec.rb:75:12: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
    expect(subject).not_to be_valid
           ^^^^^^^
spec/unit/unit_spec.rb:77:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
test/application_system_test_case.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/application_system_test_case.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/channels/application_cable/connection_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/channels/application_cable/connection_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/controllers/members_controller_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/controllers/members_controller_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/controllers/members_controller_test.rb:8:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should get index" do
       ^^^^^^^^^^^^^^^^^^
test/controllers/members_controller_test.rb:13:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should get new" do
       ^^^^^^^^^^^^^^^^
test/controllers/members_controller_test.rb:18:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should create member" do
       ^^^^^^^^^^^^^^^^^^^^^^
test/controllers/members_controller_test.rb:19:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_difference("Member.count") do
                      ^^^^^^^^^^^^^^
test/controllers/members_controller_test.rb:20:151: C: [Correctable] Layout/LineLength: Line is too long. [172/150]
      post members_url, params: { member: { email: @member.email, first_name: @member.first_name, last_name: @member.last_name, phone: @member.phone, role: @member.role } }
                                                                                                                                                      ^^^^^^^^^^^^^^^^^^^^^^
test/controllers/members_controller_test.rb:26:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should show member" do
       ^^^^^^^^^^^^^^^^^^^^
test/controllers/members_controller_test.rb:31:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should get edit" do
       ^^^^^^^^^^^^^^^^^
test/controllers/members_controller_test.rb:36:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should update member" do
       ^^^^^^^^^^^^^^^^^^^^^^
test/controllers/members_controller_test.rb:37:151: C: [Correctable] Layout/LineLength: Line is too long. [179/150]
    patch member_url(@member), params: { member: { email: @member.email, first_name: @member.first_name, last_name: @member.last_name, phone: @member.phone, role: @member.role } }
                                                                                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/controllers/members_controller_test.rb:41:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should destroy member" do
       ^^^^^^^^^^^^^^^^^^^^^^^
test/controllers/members_controller_test.rb:42:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_difference("Member.count", -1) do
                      ^^^^^^^^^^^^^^
test/controllers/point_categories_controller_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/controllers/point_categories_controller_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/controllers/point_categories_controller_test.rb:8:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should get index" do
       ^^^^^^^^^^^^^^^^^^
test/controllers/point_categories_controller_test.rb:13:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should get new" do
       ^^^^^^^^^^^^^^^^
test/controllers/point_categories_controller_test.rb:18:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should create point_category" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/controllers/point_categories_controller_test.rb:19:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_difference("PointCategory.count") do
                      ^^^^^^^^^^^^^^^^^^^^^
test/controllers/point_categories_controller_test.rb:26:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should show point_category" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/controllers/point_categories_controller_test.rb:31:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should get edit" do
       ^^^^^^^^^^^^^^^^^
test/controllers/point_categories_controller_test.rb:36:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should update point_category" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/controllers/point_categories_controller_test.rb:41:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should destroy point_category" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/controllers/point_categories_controller_test.rb:42:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_difference("PointCategory.count", -1) do
                      ^^^^^^^^^^^^^^^^^^^^^
test/controllers/points_controller_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/controllers/points_controller_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/controllers/points_controller_test.rb:8:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should get index" do
       ^^^^^^^^^^^^^^^^^^
test/controllers/points_controller_test.rb:13:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should get new" do
       ^^^^^^^^^^^^^^^^
test/controllers/points_controller_test.rb:18:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should create point" do
       ^^^^^^^^^^^^^^^^^^^^^
test/controllers/points_controller_test.rb:19:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_difference("Point.count") do
                      ^^^^^^^^^^^^^
test/controllers/points_controller_test.rb:20:151: C: [Correctable] Layout/LineLength: Line is too long. [151/150]
      post points_url, params: { point: { is_approved: @point.is_approved, member_id: @point.member_id, point_category_id: @point.point_category_id } }
                                                                                                                                                      ^
test/controllers/points_controller_test.rb:26:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should show point" do
       ^^^^^^^^^^^^^^^^^^^
test/controllers/points_controller_test.rb:31:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should get edit" do
       ^^^^^^^^^^^^^^^^^
test/controllers/points_controller_test.rb:36:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should update point" do
       ^^^^^^^^^^^^^^^^^^^^^
test/controllers/points_controller_test.rb:37:151: C: [Correctable] Layout/LineLength: Line is too long. [157/150]
    patch point_url(@point), params: { point: { is_approved: @point.is_approved, member_id: @point.member_id, point_category_id: @point.point_category_id } }
                                                                                                                                                      ^^^^^^^
test/controllers/points_controller_test.rb:41:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should destroy point" do
       ^^^^^^^^^^^^^^^^^^^^^^
test/controllers/points_controller_test.rb:42:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_difference("Point.count", -1) do
                      ^^^^^^^^^^^^^
test/models/member_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/models/member_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/models/point_category_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/models/point_category_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/models/point_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "test_helper"
^
test/models/point_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "test_helper"
        ^^^^^^^^^^^^^
test/system/members_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "application_system_test_case"
^
test/system/members_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "application_system_test_case"
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/members_test.rb:8:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "visiting the index" do
       ^^^^^^^^^^^^^^^^^^^^
test/system/members_test.rb:10:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_selector "h1", text: "Members"
                    ^^^^
test/system/members_test.rb:10:33: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_selector "h1", text: "Members"
                                ^^^^^^^^^
test/system/members_test.rb:13:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should create member" do
       ^^^^^^^^^^^^^^^^^^^^^^
test/system/members_test.rb:15:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "New member"
             ^^^^^^^^^^^^
test/system/members_test.rb:17:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Email", with: @member.email
            ^^^^^^^
test/system/members_test.rb:18:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "First name", with: @member.first_name
            ^^^^^^^^^^^^
test/system/members_test.rb:19:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Last name", with: @member.last_name
            ^^^^^^^^^^^
test/system/members_test.rb:20:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Phone", with: @member.phone
            ^^^^^^^
test/system/members_test.rb:21:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Role", with: @member.role
            ^^^^^^
test/system/members_test.rb:22:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Create Member"
             ^^^^^^^^^^^^^^^
test/system/members_test.rb:24:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_text "Member was successfully created"
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/members_test.rb:25:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Back"
             ^^^^^^
test/system/members_test.rb:28:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should update Member" do
       ^^^^^^^^^^^^^^^^^^^^^^
test/system/members_test.rb:30:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Edit this member", match: :first
             ^^^^^^^^^^^^^^^^^^
test/system/members_test.rb:32:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Email", with: @member.email
            ^^^^^^^
test/system/members_test.rb:33:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "First name", with: @member.first_name
            ^^^^^^^^^^^^
test/system/members_test.rb:34:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Last name", with: @member.last_name
            ^^^^^^^^^^^
test/system/members_test.rb:35:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Phone", with: @member.phone
            ^^^^^^^
test/system/members_test.rb:36:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Role", with: @member.role
            ^^^^^^
test/system/members_test.rb:37:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Update Member"
             ^^^^^^^^^^^^^^^
test/system/members_test.rb:39:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_text "Member was successfully updated"
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/members_test.rb:40:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Back"
             ^^^^^^
test/system/members_test.rb:43:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should destroy Member" do
       ^^^^^^^^^^^^^^^^^^^^^^^
test/system/members_test.rb:45:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Destroy this member", match: :first
             ^^^^^^^^^^^^^^^^^^^^^
test/system/members_test.rb:47:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_text "Member was successfully destroyed"
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "application_system_test_case"
^
test/system/point_categories_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "application_system_test_case"
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:8:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "visiting the index" do
       ^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:10:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_selector "h1", text: "Point categories"
                    ^^^^
test/system/point_categories_test.rb:10:33: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_selector "h1", text: "Point categories"
                                ^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:13:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should create point category" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:15:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "New point category"
             ^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:17:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Name", with: @point_category.name
            ^^^^^^
test/system/point_categories_test.rb:18:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Value", with: @point_category.value
            ^^^^^^^
test/system/point_categories_test.rb:19:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Create Point category"
             ^^^^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:21:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_text "Point category was successfully created"
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:22:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Back"
             ^^^^^^
test/system/point_categories_test.rb:25:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should update Point category" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:27:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Edit this point category", match: :first
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:29:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Name", with: @point_category.name
            ^^^^^^
test/system/point_categories_test.rb:30:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Value", with: @point_category.value
            ^^^^^^^
test/system/point_categories_test.rb:31:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Update Point category"
             ^^^^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:33:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_text "Point category was successfully updated"
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:34:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Back"
             ^^^^^^
test/system/point_categories_test.rb:37:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should destroy Point category" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:39:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Destroy this point category", match: :first
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/point_categories_test.rb:41:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_text "Point category was successfully destroyed"
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/points_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "application_system_test_case"
^
test/system/points_test.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "application_system_test_case"
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/points_test.rb:8:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "visiting the index" do
       ^^^^^^^^^^^^^^^^^^^^
test/system/points_test.rb:10:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_selector "h1", text: "Points"
                    ^^^^
test/system/points_test.rb:10:33: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_selector "h1", text: "Points"
                                ^^^^^^^^
test/system/points_test.rb:13:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should create point" do
       ^^^^^^^^^^^^^^^^^^^^^
test/system/points_test.rb:15:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "New point"
             ^^^^^^^^^^^
test/system/points_test.rb:17:11: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    check "Is approved" if @point.is_approved
          ^^^^^^^^^^^^^
test/system/points_test.rb:18:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Member", with: @point.member_id
            ^^^^^^^^
test/system/points_test.rb:19:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Point category", with: @point.point_category_id
            ^^^^^^^^^^^^^^^^
test/system/points_test.rb:20:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Create Point"
             ^^^^^^^^^^^^^^
test/system/points_test.rb:22:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_text "Point was successfully created"
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/points_test.rb:23:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Back"
             ^^^^^^
test/system/points_test.rb:26:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should update Point" do
       ^^^^^^^^^^^^^^^^^^^^^
test/system/points_test.rb:28:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Edit this point", match: :first
             ^^^^^^^^^^^^^^^^^
test/system/points_test.rb:30:11: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    check "Is approved" if @point.is_approved
          ^^^^^^^^^^^^^
test/system/points_test.rb:31:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Member", with: @point.member_id
            ^^^^^^^^
test/system/points_test.rb:32:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    fill_in "Point category", with: @point.point_category_id
            ^^^^^^^^^^^^^^^^
test/system/points_test.rb:33:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Update Point"
             ^^^^^^^^^^^^^^
test/system/points_test.rb:35:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_text "Point was successfully updated"
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/system/points_test.rb:36:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Back"
             ^^^^^^
test/system/points_test.rb:39:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  test "should destroy Point" do
       ^^^^^^^^^^^^^^^^^^^^^^
test/system/points_test.rb:41:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    click_on "Destroy this point", match: :first
             ^^^^^^^^^^^^^^^^^^^^
test/system/points_test.rb:43:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_text "Point was successfully destroyed"
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
test/test_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
ENV["RAILS_ENV"] ||= "test"
^
test/test_helper.rb:1:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
ENV["RAILS_ENV"] ||= "test"
    ^^^^^^^^^^^
test/test_helper.rb:1:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
ENV["RAILS_ENV"] ||= "test"
                     ^^^^^^
test/test_helper.rb:2:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require_relative "../config/environment"
                 ^^^^^^^^^^^^^^^^^^^^^^^
test/test_helper.rb:3:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "rails/test_help"
        ^^^^^^^^^^^^^^^^^

48 files inspected, 437 offenses detected, 412 offenses autocorrectable
